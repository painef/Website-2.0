y = saver[, "avg(elevationdifference)"],
pch = 19,
cex = .1)
saver <- polFiltCDR
View(saver)
saver <-  saver[saver[,"elevationdifference"] > -500,]
saver <-  saver[saver$avg(elevationdifference) > -500,]
saver <-  saver[saver[,"avg(elevationdifference)"] > -500,]
plot(x = as.Date(saver[,"originalconstructiondate"], "%Y-%m-%d"),
y = saver[, "avg(elevationdifference)"],
pch = 19,
cex = .1)
saver <-  saver[saver[,"avg(elevationdifference)"] > -100,]
plot(x = as.Date(saver[,"originalconstructiondate"], "%Y-%m-%d"),
y = saver[, "avg(elevationdifference)"],
pch = 19,
cex = .1)
saver[,"originalconstructiondate"] =  as.Date(saver[,"originalconstructiondate"], "%Y-%m-%d")
saver$ye <- strftime(saver[,"originalconstructiondate"], "%Y")
agg <- aggregate(saver, by = c("mo", "yr"), FUN = average)
agg <- aggregate(saver, by = c("mo", "yr"), FUN = "average")
agg <- aggregate(saver, by = c("mo", "yr"), FUN = "avg")
agg <- aggregate(saver, by = list("mo", "yr"), FUN = "avg")
agg <- aggregate(saver, by = list("mo", "yr"))
agg <- aggregate(saver, by = list("yr"), FUN = "avg")
agg <- aggregate(saver, by = list("yr"), FUN = mean)
agg <- aggregate(saver, by = list(yr), FUN = mean)
agg <- aggregate(saver, by = list(saver.yr), FUN = mean)
agg <- aggregate(saver, by = list(Region = yr), FUN = mean)
agg <- aggregate(saver, by = list(Region = saver[,"yr"]), FUN = mean)
agg <- aggregate(saver, by = list(Region = saver[,"ye"]), FUN = mean)
plot(x = as.Date(agg$Region, "%Y"),
y = agg[, "avg(elevationdifference)"],
pch = 19,
cex = .1)
plot(x = as.Date(agg$Region, "%Y"),
y = agg[, "avg(elevationdifference)"],
pch = 19,
cex = .4)
plot(x = as.Date(agg$Region, "%Y"),
y = agg[, "avg(basefloodelevation)"],
pch = 19,
cex = .4)
head(policies)
policies[,"originalconstructiondate"] <- as.Date(policies[,"originalconstructiondate"], "%Y-%m-%d")
model <- glm(elevationdifference ~ originalconstructiondate,
family = "gaussian", data = policies)
library(SparkR)
library(pryr)
mem_used()
# CHECKING JAVA NONSENSE
#Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/")
sparkR.session()
nfipdir <- "Documents/Sloan 2019 - 2024/Flood Insurance/"
stem <- "openFEMA_policies20190430_"
p1 <- "FIMA_NFIP_Redacted_Policies_Data_Set_Part_1/"
p2 <- "FIMA_NFIP_Redacted_Policies_Data_Set_Part_2/"
p3 <- "FIMA_NFIP_Redacted_Policies_Data_Set_Part_3/"
p4 <- "FIMA_NFIP_Redacted_Policies_Data_Set_Part_4/"
p5 <- "FIMA_NFIP_Redacted_Policies_Data_Set_Part_5/"
pol1 <- read.df(paste(nfipdir, p1, stem,"01.csv", sep =""),
"csv", header = 'true')
pol2 <- read.df(paste(nfipdir, p1, stem,"02.csv", sep =""),
"csv", header = 'false')
pol3 <- read.df(paste(nfipdir, p2, stem,"03.csv", sep =""),
"csv", header = 'false')
pol4 <- read.df(paste(nfipdir, p2, stem,"04.csv", sep =""),
"csv", header = 'false')
pol5 <- read.df(paste(nfipdir, p3, stem,"05.csv", sep =""),
"csv", header = 'false')
pol6 <- read.df(paste(nfipdir, p3, stem,"06.csv", sep =""),
"csv", header = 'false')
pol7 <- read.df(paste(nfipdir, p4, stem,"07.csv", sep =""),
"csv", header = 'false')
pol8 <- read.df(paste(nfipdir, p4, stem,"08.csv", sep =""),
"csv", header = 'false')
pol9 <- read.df(paste(nfipdir, p5, stem,"09.csv", sep =""),
"csv", header = 'false')
pol10 <- read.df(paste(nfipdir, p5, stem,"10.csv", sep =""),
"csv", header = 'false')
policies <- rbind(pol2, pol3, pol4, pol5, pol6, pol7, pol8, pol9, pol10)
names(policies) <- names(pol1)
policies <- rbind(pol1, policies)
head = head(policies)
mem_used()
#____________________________________________________
# STEP 2: Filtering the data
print(names(policies))
#policies = filter(policies, policies$smallbusinessindicatorbuilding == N)
policies = filter(policies, policies$condominiumindicator == "N")
policies = filter(policies, policies$construction == "N")
polFiltDate <- agg(groupBy(policies, "policyeffectivedate"),
originalconstructiondate = "avg", policycount = "avg",
policycost="avg",
totalinsurancepremiumofthepolicy = "avg",
totalcontentsinsurancecoverage = "avg",
totalbuildinginsurancecoverage= "avg",
numberoffloorsininsuredbuilding = "avg",
lowestfloorelevation = "avg",
deductibleamountinbuildingcoverage = "avg",
elevationdifference = "avg",
floodzone = "avg",
ratemethod = "avg",
primaryresidenceindicator = "avg",
lowestadjacentgrade = "avg",
elevationdifference = "avg",
crsdiscount = "avg",
construction = "avg",
basefloodelevation = "avg",
agriculturestructureindicator = "avg"
)
# Only keeping most dangerous flood zones
polFiltDate = filter(policies, policies$floodzone != "B")
polFiltDate = filter(polFiltDate, polFiltDate$floodzone != "X")
polFiltDate = filter(polFiltDate, polFiltDate$floodzone != "C")
polFiltDate = filter(polFiltDate, polFiltDate$elevationdifference < 900)
polFiltDate <- agg(groupBy(polFiltDate, "policyeffectivedate"),
originalconstructiondate = "avg", policycount = "avg",
policycost="avg",
totalinsurancepremiumofthepolicy = "avg",
totalcontentsinsurancecoverage = "avg",
totalbuildinginsurancecoverage= "avg",
numberoffloorsininsuredbuilding = "avg",
lowestfloorelevation = "avg",
deductibleamountinbuildingcoverage = "avg",
elevationdifference = "avg",
floodzone = "avg",
ratemethod = "avg",
primaryresidenceindicator = "avg",
lowestadjacentgrade = "avg",
elevationdifference = "avg",
crsdiscount = "avg",
construction = "avg",
basefloodelevation = "avg",
agriculturestructureindicator = "avg"
)
polFiltDateR <- collect(polFiltDate)
pbinom(9, size = 1919, prob = 0.5)
pbinom(922, size = 1919, prob = 0.5)
install.package("gmm")
install.packages("gmm")
library(gmm)
install.packages(c("AER", "gmm", "systemfit"))
library(readxl)
ProblemSetEIS_CieslakPovala <- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
View(ProblemSetEIS_CieslakPovala)
data <- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
View(data)
colnames(data)
Tilde.r.t <- yld13M_Q - ld10y_Q
data$Tilde.r.t <- data$yld13M_Q - data$ld10y_Q
data$yld13M_Q - data$ld10y_Q
data$yld13M_Q
df<- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
data <- data.frame(df)
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t1 <- data$yld13M_Q
data$Tilde.r.t <- data$yld13M_Q - data$ld10y_Q
data$Tilde.r.t <- data$yld13M_Q - data$yld10y_Q
data$yld13M_Q
data$yld3M_Q
data$Tilde.r.t <- data$yld3M_Q - data$yld10y_Q
data$yld3M_Q
data$yld10y_Q
data<- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t1 <- data$yld13M_Q
data$Tilde.r.t <- data$yld3M_Q - data$yld10y_Q
data$Tilde.r.t
data$Tilde.r.t <- data$yld10y_Q - data$yld3M_Q
sigma2_z = 0.04
rho_z = 0.98
sigma2_e = 0.0016
k = 1
R2 = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2
R2_k = data.frame()
R2_k = data.frame()
for (k in 1:20){
R2_it = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_k[k,"R2"] <- c(k,R2_it)
}
R2_k = data.frame()
for (k in 1:20){
R2_it = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_k$R2.val <- R2_it
}
R2_k = data.frame(ncol=2)
R2_k = data.frame(ncol=2)
for (k in 1:20){
R2_it = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_k$R2.val <- R2_it
}
View(R2_it)
sigma2_z = 0.04
rho_z = 0.98
sigma2_e = 0.0016
k = 1
R2 = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_val <- NULL
k_val <- NULL
for (k in 1:20){
R2_it = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_val <- c(R2_val, R2_it)
k_val <- c(k_val, k)
}
plot(x = k_val, y= R2_val, type="line"  )
sigma2_z = 0.04
rho_z = 0.98
sigma2_e = 0.0016
k = 1
R2 = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_val <- NULL
k_val <- NULL
for (k in 1:50){
R2_it = (sigma2_z*((rho_z^k)-1)^2)/(
k*sigma2_e*(1-(rho_z^2)) +  2*sigma2_z*(1-(rho_z^k)) )
R2_val <- c(R2_val, R2_it)
k_val <- c(k_val, k)
}
plot(x = k_val, y= R2_val, type="line"  )
(0.0529 + (.5*.1638*.1638))/0.00017
(0.0529 + (.5*.1638*.1638))/0.00017
data$R.t1 <- data$yld3M_Q
data$Tilde.r.t <- data$yld10y_Q - data$yld3M_Q
set1  <- R.t1 ~ Tilde.r.t
ols.set1.results   <- lm(set1)
#__________________________________________________
#__________________________________________________
#                    Problem 5
#__________________________________________________
#__________________________________________________
data<- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
#__________________________________________________
#__________________________________________________
#                    Problem 5
#__________________________________________________
#__________________________________________________
data<- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
library(readxl)
#__________________________________________________
#__________________________________________________
#                    Problem 5
#__________________________________________________
#__________________________________________________
data<- read_excel("Dropbox (MIT)/15.472 Advanced AP/ProblemSetEIS_CieslakPovala.xlsx",
sheet = "Data US")
data <- data.frame(df)
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t <- data$yld3M_Q - log(data$pi_tp1) # Real rate
log(5)
# Shifting R.t to t+1
data$Tilde.r.t <- data$yld10y_Q - data$yld3M_Q # Term spread
2:length(Tilde.t.t_1)
data$Tilde.t.t_1 <- data[2:length(Tilde.r.t),"Tilde.r.t"]
# Shifting R.t to t+1
data$Tilde.r.t <- data$yld10y_Q - data$yld3M_Q # Term spread
data$Tilde.t.t_1 <- data[2:length(Tilde.r.t),"Tilde.r.t"]
data$Tilde.t.t_1 <- data[2:length(data$Tilde.r.t),"Tilde.r.t"]
data$Tilde.t.t_1 <- data[2:length(data$Tilde.r.t),"Tilde.r.t"]+NA
data$Tilde.t.t_1 <- data[2:length(data$Tilde.r.t),"Tilde.r.t"]+c(NA)
data[2:length(data$Tilde.r.t),"Tilde.r.t"]
data$Tilde.t.t_1 <- c(data[2:length(data$Tilde.r.t),"Tilde.r.t"], NA)
# Shifting R.t to t+1
data$R.t.1 <-  c(NA, data[1:(length(R.t)-1),"R.t"])
data[1:(length(R.t)-1),"R.t"]
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t <- data$yld3M_Q - log(data$pi_tp1) # Real rate
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t <- data$yld3M_Q - data$pi_tp1 # Real rate
# Log consumption
data$cons_real_levels.logs <- log(data$total_cons_real_levels)
# Log consumption lagged
data$cons_real_levels.logs_1 <- c(data[2:length(data$total_cons_real_levels) ,"total_cons_real_levels"], NA)
# Log consumption lagged
data$cons_real_levels.logs_1 <- c(data[2:length(data$total_cons_real_levels) ,"total_cons_real_levels"], NA)
data$cons_real_levels.logs <- log(data$total_cons_real_levels)
# Log consumption lagged
data$cons_real_levels.logs_1 <- c(NA, data[1:(length(data$total_cons_real_levels)-1) ,"total_cons_real_levels"])
# Difference of logs = consumption growth
data$cons_real_levels.growth <- data$cons_real_levels.logs - data$cons_real_levels.logs_1
# Lagged consumption growth
data$cons_real_levels.logs_1 <- c(NA, log(data[1:(length(data$total_cons_real_levels)-1) ,"total_cons_real_levels"]) )
# Difference of logs = consumption growth
data$cons_real_levels.growth <- data$cons_real_levels.logs - data$cons_real_levels.logs_1
# Lagge
set1  <-  R.t.1 ~ Tilde.r.t
ols.set1.results   <- lm(set1)
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t <- data$yld3M_Q - data$pi_tp1 # Real rate
# Shifting R.t to t+1
data$R.t.1 <-  c(data[2:(length(R.t)),"R.t"], NA  )
data$Tilde.r.t <- data$yld10y_Q - data$yld3M_Q # Term spread
data$Tilde.t.t_1 <- c(NA, data[1:(length(data$Tilde.r.t)-1),"Tilde.r.t"])
# Log consumption
data$cons_real_levels.logs <- log(data$total_cons_real_levels)
# Log consumption lagged
data$cons_real_levels.logs_1 <- c(NA, log(data[1:(length(data$total_cons_real_levels)-1) ,"total_cons_real_levels"]) )
# Difference of logs = consumption growth
data$cons_real_levels.growth <- data$cons_real_levels.logs - data$cons_real_levels.logs_1
# Lagged consumption growth
set1  <-  R.t.1 ~ Tilde.r.t
ols.set1.results   <- lm(set1)
# Shifting R.t to t+1
data$R.t.1 <-  c(data[2:(length(R.t)),"R.t"], NA  )
# Expost real rate (t+1) = nominal rate at t - log(change in price t to t+1)
data$R.t <- data$yld3M_Q - data$pi_tp1 # Real rate
# Shifting R.t to t+1
data$R.t.1 <-  c(data[2:(length(data$R.t)),"R.t"], NA  )
data$Tilde.t.t_1 <- c(NA, data[1:(length(data$Tilde.r.t)-1),"Tilde.r.t"])
# Log consumption
data$cons_real_levels.logs <- log(data$total_cons_real_levels)
# Log consumption lagged
data$cons_real_levels.logs_1 <- c(NA, log(data[1:(length(data$total_cons_real_levels)-1) ,"total_cons_real_levels"]) )
# Difference of logs = consumption growth
data$cons_real_levels.growth <- data$cons_real_levels.logs - data$cons_real_levels.logs_1
set1  <-  R.t.1 ~ Tilde.r.t
ols.set1.results   <- lm(set1)
# Shifting R.t to t+1
data$R.t.1 <-  c(data[2:(length(data$R.t)),"R.t"], NA  )
set1  <-  R.t.1 ~ Tilde.r.t
ols.set1.results   <- lm(set1)
?lm
ols.set1.results   <- lm(set1, data = data)
set2  <-  R.t.1 ~ Tilde.r.t + Tilde.t.t_1 + yld3M_Q + pi_tp1 +
ols.set2.results   <- lm(set2, data = data)
colnames(data)
# Lagged consumption growth
data$cons_real_levels.growth.lag <- c(NA, data[1:(length(data$cons_real_levels.growth)-1)]  )
# Difference of logs = consumption growth
data$cons_real_levels.growth <- data$cons_real_levels.logs - data$cons_real_levels.logs_1
# Lagged consumption growth
data$cons_real_levels.growth.lag <- c(NA, data[1:(length(data$cons_real_levels.growth)-1)]  )
# Lagged consumption growth
data$cons_real_levels.growth.lag <- c(NA, data[1:(length(data$cons_real_levels.growth)-1)]  )
# Lagged consumption growth
data$cons_real_levels.growth.lag <- c(NA, data[1:(length(data$cons_real_levels.growth)-1), "cons_real_levels.growth"]  )
# Lagged consumption growth
data$cons_real_levels.growth.lag <- c(NA, data[1:(length(data$cons_real_levels.growth)-1), "cons_real_levels.growth"]  )
set2  <-  R.t.1 ~ Tilde.r.t + Tilde.t.t_1 + yld3M_Q + pi_tp1 + cons_real_levels.growth.lag
ols.set2.results   <- lm(set2, data = data)
summary(ols.set1.results)
predict.lm(ols.set1.results)
colnames(data)
data$output_real_levels.logs <- log(data$total_output_real_levels)
# Log output lagged
data$output_real_levels.logs_1 <- c(NA, log(data[1:(length(data$total_output_real_levels)-1) ,"total_cons_real_levels"]) )
# Difference of logs = output growth
data$output_real_levels.growth <- data$output_real_levels.logs - data$output_real_levels.logs_1
# Lagged output growth
data$output_real_levels.growth.lag <- c(NA, data[1:(length(data$output_real_levels.growth)-1), "output_real_levels.growth"]  )
EIS.1  <-  cons_real_levels.growth.lag ~ Tilde.r.t
ols.eis1.results   <- lm(EIS.1, data = data)
summary(ols.eis1.results)
predict.lm(ols.eis1.results)
# Output growth regression
EIS.2  <-  output_real_levels.growth.lag ~ Tilde.r.t + Tilde.t.t_1 + yld3M_Q + pi_tp1 + cons_real_levels.growth.lag
ols.eis2.results   <- lm(EIS.2, data = data)
summary(ols.eis2.results)
predict.lm(ols.eis2.results)
# Consumption growth regression
EIS.1  <-  cons_real_levels.growth.lag ~ Tilde.r.t
ols.eis1.results   <- lm(EIS.1, data = data)
summary(ols.eis1.results)
#predict.lm(ols.eis1.results)
# Output growth regression
EIS.2  <-  output_real_levels.growth.lag ~ Tilde.r.t + Tilde.t.t_1 + yld3M_Q + pi_tp1 + cons_real_levels.growth.lag
ols.eis2.results   <- lm(EIS.2, data = data)
summary(ols.eis2.results)
#predict.lm(ols.eis2.results)
EIS.c.set1  <-  cons_real_levels.growth.lag ~ R.t.1 |  Tilde.r.t
ols.eis.c.1.results   <- ivreg(EIS.c.set1, data = data)
summary(ols.eis.c.1.results)
library(lmtest)
library(sandwich);
library(foreign);
library(AER);
#library(ivpack);
library(systemfit);
library(gmm);
library(systemfit)
install.packages(c("AER", "gmm", "systemfit"))
library(lmtest)
library(sandwich);
library(foreign);
library(AER);
#library(ivpack);
library(systemfit);
library(gmm);
library(systemfit)
library(dplyr)
library(pracma)   # Chebyshev polynomials
library(spatstat) # Gauss-Hermite
library(stat)
library(statmod)
install.packages("statmod")
D = matrix( c(0,1,0),
c(1,1,0),
c(2,1,1) )
D
D = as.matrix( c(0,1,0),
c(1,1,0),
c(2,1,1) )
D
D = as.matrix(rbind( c(0,1,0),
c(1,1,0),
c(2,1,1) ))
D
solve(D)
solve(D)%*%t(t(c(0,0.5,1.5)))
install.packages("pwrAB")
library(dplyr)
library(gtools)
setwd("C:/Users/painef/Dropbox (MIT)/14.385 Nonlinear Econometrics/pset6")
sd.1 <- sd(rbinom( 100000, 1, 0.17))
rbinom( 100000, 1, 0.17)
sd.1 <- sd(rbinom( 100000, 1, 0.17))
sd.1
sd(rbinom( 100000, 1, 0.18))
sd(rbinom( 1000, 1, 0.18))
###############################################################################
# minimum detectable magnitude of treatment effect
alpha <- .01
sd(rbinom( 100000, 1, 0.18))
###############################################################################
# minimum detectable magnitude of treatment effect
alpha <- .01
# Prob reject  (left hand side)
power <- 0.8
sd.1 <- sd(rbinom( 100000, 1, 0.18))
sd.0 <- sd(rbinom( 100000, 1, 0.17))
# Proportion of observations in the treatment group
p = 1/2
# Starting value
N = 1000
out = 0
while ( (out - power) < 0 ){
N = N + 1
A <- -1.96 - alpha/sqrt( (sd.1^2/(p*N) )  +  (sd.0^2/((1-p)*N))    )
B <- 1.96 - alpha/sqrt(  (sd.1^2/(p*N))   +  (sd.0^2/((1-p)*N))   )
out <- pnorm(A) + 1 - pnorm(B)
}
N # 9583
# N = 9 (numer of positive spread assets)
N = 9
# M = 4 (number of investor types)
M = 4
S = c(0)
# Relative spread of each asset j is S_j = 0.005j
for (j in c(1:9)){
S <- c(S, 0.005*j)
}
mu = c(12,2,1,1/5)
lam = mu
# Solving Equations (1)-(3)
i.4 = matrix(rep(1), ncol = 1, nrow = 4)
i.10 = t(matrix(rep(1), ncol = 1, nrow = 10))
S = t(S)
mu = t(t(mu))
step = 10
# choosing a guess for values of V
V = matrix(c(1,rep(0.8, length.out = 9)), ncol = 10, nrow = 1)
V.star = matrix( c(1,rep(0, length.out = 9)), ncol = 10, nrow = 1)
count = 0
while ( (sum(abs(V-V.star))>.0001) &  count <500000  ){
# print(sum(abs(V-V.star)))
V[2:10] = V[2:10] - (V[2:10]-V.star[2:10])/step
R = i.4%*%(1/V) - mu%*%S
R.star = t(apply(R,1,max))
R.star = t(c(1,1.1,1.12,1.148))
V.temp = t(1/(t(R.star)%*%i.10 + mu%*%S))
V.star = t(apply(V.temp,1,max))
count = count +1
}
count = 0
R
V.star
library(stargazer)
R = i.4%*%(1/V.star) - mu%*%S
t(R)
t(R)-1
S
ddata.frame( S = t(S), (t(R) -1))
data.frame( S = t(S), (t(R) -1))
?stargazer
out = data.frame( S = t(S), (t(R) -1), V = V.star)
stargazer(out,type = "latex", summary = F)
V.star
out = data.frame( S = t(S), (t(R) -1), V = t(V.star))
stargazer(out,type = "latex", summary = F)
blogdown:::blogdown_site
blogdown:::blogdown_site()
install.packages('blogdown')
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
setwd("~/Documents/GitHub/Website-2.0")
blogdown:::serve_site()
