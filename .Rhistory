A = hpfilter(logAt,freq=1600,type=c("lambda"),drift=FALSE)
a.cyc = A$cycle
filtered = hpfilter(logAt,freq=1600,type=c("lambda"),drift=FALSE)
a.cyc = filtered$cycle
plot(seq(1961,2016, length.out = 224),a.cyc, type = "l", main = "At Cycle ", xlab = "year")
acf(a.cyc, lag.max = 6, type = "correlation", plot = TRUE)
alpha
mean(alpha)
library(mFilter)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment
t5.3.5 = read.csv("NIPA 5.3.5.csv")
t5.3.4 = read.csv("NIPA 5.3.4.csv")
t4.1 = read.csv("FA 4.1.csv")
t4.2 = read.csv("FA 4.2.csv")
# Quarterly real private non-residential fixed investment
real.priv.nonres.f.invest = (t5.3.4$Nonresidential^(-1))*(t5.3.5$Nonresidential.private.nominal.fixed.investment)
# Annual real private non-residential fixed assets
real.priv.nonres.f.asset = (t4.1$Private.nonresidential.fixed.assets) * ((t4.2$Private.nonresidential.fixed.assets)^(-1))
# Quarterly series for real private non-residential fixed assets. ( Using interpolation method from Levy and Chen (1994))
# Method 1: Segmented Linear Interpolation of Real Net Stock of Private Nonresidential Fixed Assets
# Fun Fact! According to Boyer and Merzbach 1991, linear interpolation was used as early as 2000 B.C. in ancient Babylonia Mesopotamia to construct exponenetial tables
real.priv.nonres.f.asset.quart.1 = NULL
for (i in seq(2,57)){
for (j in c(1,2,3,4)){
real.priv.nonres.f.asset.quart.1[i-1] = (1 - (j/4))*real.priv.nonres.f.asset[(i-1)] + (j/4)*real.priv.nonres.f.asset[i]
}
}
plot(seq(1961,2016),real.priv.nonres.f.asset.quart.1, type = "p", main = "Method 1 Quarterly Interpolation")
#Method 2: Use relationship between capital stock and the corresponding investment series to estimate quarterly depreciation rates which vary over time. Then use the depreciation rates to construct a quarterly capital stock series.
# Step 1: Calculating (annual) depreciation rates over time
real.priv.nonres.f.asset.quart.2 = NULL
D= NULL
K = real.priv.nonres.f.asset
I = real.priv.nonres.f.invest
for (i in seq(2,57)){
C = (i-1)*4
f <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
D[(i-1)] = 1 - (uniroot(f,lower = .000001, upper = 1000000)$root )
}
plot(seq(1961,2016), D, type = "l", main = "Annual Depreciation Rates")
K.Q = NULL
for (i in seq(1,56)){
C = (i-1)*4
C.1 = i*4
# D is indexed one year ahead of K and I
K.Q[C+1] = (1-D[i])*K[i]     + I[C.1 + 1]
K.Q[C+2] = (1-D[i])*K.Q[C+1] + I[C.1 + 2]
K.Q[C+3] = (1-D[i])*K.Q[C+2] + I[C.1 + 3]
K.Q[C+4] = (1-D[i])*K.Q[C+3] + I[C.1 + 4]
}
real.priv.nonres.f.asset.quart.2 = K.Q
plot(seq(1,224), K.Q, type = "l", main = "Method 2 Quarterly Interpolation")
library(reshape)
# Quarterly total private payroll (averaging over the months in each quarter happens prior to csv import)
bls = read.csv("BLS CES0500000001 Edit.csv")
bls.long <- melt(bls, id = c( "Year"))
bls.long <- bls.long[order(bls.long[,1], bls.long[,2]), ]
# Quarterly labor share
t.1.10 = read.csv("NIPA 1.10.csv")
alpha = t.1.10$Compensation.of.employees..paid / t.1.10$Gross.domestic.income
library(mFilter)
# Constructing a series for log(A_t)
# Drop first 4 values so that length matches kt
yt = real.priv.nonres.output[5:228]
kt = real.priv.nonres.f.asset.quart.2
nt = bls.long[5:228,"value"]
al = mean(alpha[5:228])
logAt = log(yt) - al*log(nt) - (1-al)*log(kt)
plot(seq(1961,2016, length.out = 224),logAt, type = "l", main = "logAt ", xlab = "year")
# HP Filter function
hp_filter <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
# Running the HP Filter
filtered = hpfilter(logAt,freq=1600,type=c("lambda"),drift=FALSE)
a.cyc = filtered$cycle
plot(seq(1961,2016, length.out = 224),a.cyc, type = "l", main = "At Cycle ", xlab = "year")
# Autocorrelogram of cyclical component
acf(a.cyc, lag.max = 6, type = "correlation", plot = TRUE)
library(mFilter)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment
plot(real.house.services)
plot(real.priv.nonres.output, type = "l")
plot(real.priv.nonres.f.asset, type = "l")
t5.3.5 = read.csv("NIPA 5.3.5.csv")
t5.3.4 = read.csv("NIPA 5.3.4.csv")
t4.1 = read.csv("FA 4.1.csv")
t4.2 = read.csv("FA 4.2.csv")
# Quarterly real private non-residential fixed investment
real.priv.nonres.f.invest = (t5.3.4$Nonresidential^(-1))*(t5.3.5$Nonresidential.private.nominal.fixed.investment)*100
# Annual real private non-residential fixed assets
real.priv.nonres.f.asset = (t4.1[53,"Private.nonresidential.fixed.assets"]) * (t4.2$Private.nonresidential.fixed.assets)/100
plot(t4.1$Private.nonresidential.fixed.assets)
plot((t4.2$Private.nonresidential.fixed.assets)/100)
plot(real.priv.nonres.f.asset, type = "l")
t5.3.5 = read.csv("NIPA 5.3.5.csv")
t5.3.4 = read.csv("NIPA 5.3.4.csv")
t4.1 = read.csv("FA 4.1.csv")
t4.2 = read.csv("FA 4.2.csv")
# Quarterly real private non-residential fixed investment
real.priv.nonres.f.invest = (t5.3.4$Nonresidential^(-1))*(t5.3.5$Nonresidential.private.nominal.fixed.investment)*100
# Annual real private non-residential fixed assets
real.priv.nonres.f.asset = (t4.1[53,"Private.nonresidential.fixed.assets"]) * (t4.2$Private.nonresidential.fixed.assets)/100
#plot(t4.1$Private.nonresidential.fixed.assets)
#plot((t4.2$Private.nonresidential.fixed.assets)/100)
plot(real.priv.nonres.f.invest, type = "l")
# Quarterly series for real private non-residential fixed assets. ( Using interpolation method from Levy and Chen (1994))
# Method 1: Segmented Linear Interpolation of Real Net Stock of Private Nonresidential Fixed Assets
# Fun Fact! According to Boyer and Merzbach 1991, linear interpolation was used as early as 2000 B.C. in ancient Babylonia Mesopotamia to construct exponenetial tables
real.priv.nonres.f.asset.quart.1 = NULL
for (i in seq(2,57)){
for (j in c(1,2,3,4)){
real.priv.nonres.f.asset.quart.1[i-1] = (1 - (j/4))*real.priv.nonres.f.asset[(i-1)] + (j/4)*real.priv.nonres.f.asset[i]
}
}
plot(seq(1961,2016),real.priv.nonres.f.asset.quart.1, type = "p", main = "Method 1 Quarterly Interpolation")
#Method 2: Use relationship between capital stock and the corresponding investment series to estimate quarterly depreciation rates which vary over time. Then use the depreciation rates to construct a quarterly capital stock series.
# Step 1: Calculating (annual) depreciation rates over time
real.priv.nonres.f.asset.quart.2 = NULL
D= NULL
K = real.priv.nonres.f.asset
I = real.priv.nonres.f.invest/4
plot(K)
plot(I)
for (i in seq(2,57)){
C = (i-1)*4
f <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
D[(i-1)] = 1 - (uniroot(f,lower = .000001, upper = 10000)$root )
}
plot(seq(1961,2016), D*4, type = "l", main = "Annual Depreciation Rates")
K.Q = NULL
for (i in seq(1,56)){
C = (i-1)*4
C.1 = i*4
# D is indexed one year ahead of K and I
K.Q[C+1] = (1-D[i])*K[i]     + I[C.1 + 1]
K.Q[C+2] = (1-D[i])*K.Q[C+1] + I[C.1 + 2]
K.Q[C+3] = (1-D[i])*K.Q[C+2] + I[C.1 + 3]
K.Q[C+4] = (1-D[i])*K.Q[C+3] + I[C.1 + 4]
}
real.priv.nonres.f.asset.quart.2 = K.Q
plot(seq(1,224), K.Q, type = "l", main = "Method 2 Quarterly Interpolation")
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment - real.house.services
t5.3.5 = read.csv("NIPA 5.3.5.csv")
t5.3.4 = read.csv("NIPA 5.3.4.csv")
t4.1 = read.csv("FA 4.1.csv")
t4.2 = read.csv("FA 4.2.csv")
# Quarterly real private non-residential fixed investment
real.priv.nonres.f.invest = (t5.3.4$Nonresidential^(-1))*(t5.3.5$Nonresidential.private.nominal.fixed.investment)*100
# Annual real private non-residential fixed assets
real.priv.nonres.f.asset = (t4.1[53,"Private.nonresidential.fixed.assets"]) * (t4.2$Private.nonresidential.fixed.assets)/100
#plot(t4.1$Private.nonresidential.fixed.assets)
#plot((t4.2$Private.nonresidential.fixed.assets)/100)
plot(real.priv.nonres.f.invest, type = "l")
# Quarterly series for real private non-residential fixed assets. ( Using interpolation method from Levy and Chen (1994))
# Method 1: Segmented Linear Interpolation of Real Net Stock of Private Nonresidential Fixed Assets
# Fun Fact! According to Boyer and Merzbach 1991, linear interpolation was used as early as 2000 B.C. in ancient Babylonia Mesopotamia to construct exponenetial tables
real.priv.nonres.f.asset.quart.1 = NULL
for (i in seq(2,57)){
for (j in c(1,2,3,4)){
real.priv.nonres.f.asset.quart.1[i-1] = (1 - (j/4))*real.priv.nonres.f.asset[(i-1)] + (j/4)*real.priv.nonres.f.asset[i]
}
}
plot(seq(1961,2016),real.priv.nonres.f.asset.quart.1, type = "p", main = "Method 1 Quarterly Interpolation")
#Method 2: Use relationship between capital stock and the corresponding investment series to estimate quarterly depreciation rates which vary over time. Then use the depreciation rates to construct a quarterly capital stock series.
# Step 1: Calculating (annual) depreciation rates over time
real.priv.nonres.f.asset.quart.2 = NULL
D= NULL
K = real.priv.nonres.f.asset
I = real.priv.nonres.f.invest/4
#plot(K)
#plot(I)
for (i in seq(2,57)){
C = (i-1)*4
f <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
D[(i-1)] = 1 - (uniroot(f,lower = .000001, upper = 10000)$root )
}
plot(seq(1961,2016), D*4, type = "l", main = "Annual Depreciation Rates")
K.Q = NULL
for (i in seq(1,56)){
C = (i-1)*4
C.1 = i*4
# D is indexed one year ahead of K and I
K.Q[C+1] = (1-D[i])*K[i]     + I[C.1 + 1]
K.Q[C+2] = (1-D[i])*K.Q[C+1] + I[C.1 + 2]
K.Q[C+3] = (1-D[i])*K.Q[C+2] + I[C.1 + 3]
K.Q[C+4] = (1-D[i])*K.Q[C+3] + I[C.1 + 4]
}
real.priv.nonres.f.asset.quart.2 = K.Q
plot(seq(1,224), K.Q, type = "l", main = "Method 2 Quarterly Interpolation")
plot(real.house.services)
plot(real.priv.nonres.output)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment - real.house.services
plot(real.house.services)
plot(real.priv.nonres.output)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment #- real.house.services
plot(real.house.services)
plot(real.priv.nonres.output)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment - real.house.services
plot(real.house.services)
plot(real.priv.nonres.output)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment - real.house.services
plot(real.house.services)
plot(real.priv.nonres.output)
t5.3.5 = read.csv("NIPA 5.3.5.csv")
t5.3.4 = read.csv("NIPA 5.3.4.csv")
t4.1 = read.csv("FA 4.1.csv")
t4.2 = read.csv("FA 4.2.csv")
# Quarterly real private non-residential fixed investment
real.priv.nonres.f.invest = (t5.3.4$Nonresidential^(-1))*(t5.3.5$Nonresidential.private.nominal.fixed.investment)*100
# Annual real private non-residential fixed assets
real.priv.nonres.f.asset = (t4.1[53,"Private.nonresidential.fixed.assets"]) * (t4.2$Private.nonresidential.fixed.assets)/100
#plot(t4.1$Private.nonresidential.fixed.assets)
#plot((t4.2$Private.nonresidential.fixed.assets)/100)
plot(real.priv.nonres.f.invest, type = "l")
# Quarterly series for real private non-residential fixed assets. ( Using interpolation method from Levy and Chen (1994))
# Method 1: Segmented Linear Interpolation of Real Net Stock of Private Nonresidential Fixed Assets
# Fun Fact! According to Boyer and Merzbach 1991, linear interpolation was used as early as 2000 B.C. in ancient Babylonia Mesopotamia to construct exponenetial tables
real.priv.nonres.f.asset.quart.1 = NULL
for (i in seq(2,57)){
for (j in c(1,2,3,4)){
real.priv.nonres.f.asset.quart.1[i-1] = (1 - (j/4))*real.priv.nonres.f.asset[(i-1)] + (j/4)*real.priv.nonres.f.asset[i]
}
}
plot(seq(1961,2016),real.priv.nonres.f.asset.quart.1, type = "p", main = "Method 1 Quarterly Interpolation")
#Method 2: Use relationship between capital stock and the corresponding investment series to estimate quarterly depreciation rates which vary over time. Then use the depreciation rates to construct a quarterly capital stock series.
# Step 1: Calculating (annual) depreciation rates over time
real.priv.nonres.f.asset.quart.2 = NULL
D= NULL
K = real.priv.nonres.f.asset
I = real.priv.nonres.f.invest/4
#plot(K)
#plot(I)
for (i in seq(2,57)){
C = (i-1)*4
f <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
D[(i-1)] = 1 - (uniroot(f,lower = .000001, upper = 10000)$root )
}
plot(seq(1961,2016), D*4, type = "l", main = "Annual Depreciation Rates")
K.Q = NULL
for (i in seq(1,56)){
C = (i-1)*4
C.1 = i*4
# D is indexed one year ahead of K and I
K.Q[C+1] = (1-D[i])*K[i]     + I[C.1 + 1]
K.Q[C+2] = (1-D[i])*K.Q[C+1] + I[C.1 + 2]
K.Q[C+3] = (1-D[i])*K.Q[C+2] + I[C.1 + 3]
K.Q[C+4] = (1-D[i])*K.Q[C+3] + I[C.1 + 4]
}
real.priv.nonres.f.asset.quart.2 = K.Q
plot(seq(1,224), K.Q, type = "l", main = "Method 2 Quarterly Interpolation")
library(reshape)
# Quarterly total private payroll (averaging over the months in each quarter happens prior to csv import)
bls = read.csv("BLS CES0500000001 Edit.csv")
bls.long <- melt(bls, id = c( "Year"))
bls.long <- bls.long[order(bls.long[,1], bls.long[,2]), ]
# Quarterly labor share
t.1.10 = read.csv("NIPA 1.10.csv")
alpha = t.1.10$Compensation.of.employees..paid / (t.1.10$Compensation.of.employees..paid + t.1.10$Net.operating.surplus  )
library(mFilter)
# Constructing a series for log(A_t)
# Drop first 4 values so that length matches kt
yt = real.priv.nonres.output[5:228]
kt = real.priv.nonres.f.asset.quart.2
nt = bls.long[5:228,"value"]
al = mean(alpha[5:228])
logAt = log(yt) - al*log(nt) - (1-al)*log(kt)
plot(seq(1961,2016, length.out = 224),logAt, type = "l", main = "logAt ", xlab = "year")
# HP Filter function
hp_filter <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
# Running the HP Filter
filtered = hpfilter(logAt,freq=1600,type=c("lambda"),drift=FALSE)
a.cyc = filtered$cycle
plot(seq(1961,2016, length.out = 224),a.cyc, type = "l", main = "At Cycle ", xlab = "year")
# Autocorrelogram of cyclical component
acf(a.cyc, lag.max = 6, type = "correlation", plot = TRUE)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment - real.house.services
plot(real.house.services)
plot(real.priv.nonres.output)
t1.1.6 = read.csv("NIPA 1.1.6.csv")
t2.3.4 = read.csv("NIPA 2.3.4.csv")
t2.3.5 = read.csv("NIPA 2.3.5.csv")
# Real series for housing services
real.house.services = ((t2.3.4$Housing.and.utilities)^(-1)) *(t2.3.5$Housing.and.utilities)*100
# Real series for private non-residential output
real.priv.nonres.output = t1.1.6$Gross.domestic.product - t1.1.6$Government.consumption.expenditures.and.gross.investment - real.house.services
#plot(real.house.services)
#plot(real.priv.nonres.output)
t5.3.5 = read.csv("NIPA 5.3.5.csv")
t5.3.4 = read.csv("NIPA 5.3.4.csv")
t4.1 = read.csv("FA 4.1.csv")
t4.2 = read.csv("FA 4.2.csv")
# Quarterly real private non-residential fixed investment
real.priv.nonres.f.invest = (t5.3.4$Nonresidential^(-1))*(t5.3.5$Nonresidential.private.nominal.fixed.investment)*100
# Annual real private non-residential fixed assets
real.priv.nonres.f.asset = (t4.1[53,"Private.nonresidential.fixed.assets"]) * (t4.2$Private.nonresidential.fixed.assets)/100
#plot(t4.1$Private.nonresidential.fixed.assets)
#plot((t4.2$Private.nonresidential.fixed.assets)/100)
plot(real.priv.nonres.f.invest, type = "l")
# Quarterly series for real private non-residential fixed assets. ( Using interpolation method from Levy and Chen (1994))
# Method 1: Segmented Linear Interpolation of Real Net Stock of Private Nonresidential Fixed Assets
# Fun Fact! According to Boyer and Merzbach 1991, linear interpolation was used as early as 2000 B.C. in ancient Babylonia Mesopotamia to construct exponenetial tables
real.priv.nonres.f.asset.quart.1 = NULL
for (i in seq(2,57)){
for (j in c(1,2,3,4)){
real.priv.nonres.f.asset.quart.1[i-1] = (1 - (j/4))*real.priv.nonres.f.asset[(i-1)] + (j/4)*real.priv.nonres.f.asset[i]
}
}
plot(seq(1961,2016),real.priv.nonres.f.asset.quart.1, type = "p", main = "Method 1 Quarterly Interpolation")
#Method 2: Use relationship between capital stock and the corresponding investment series to estimate quarterly depreciation rates which vary over time. Then use the depreciation rates to construct a quarterly capital stock series.
# Step 1: Calculating (annual) depreciation rates over time
real.priv.nonres.f.asset.quart.2 = NULL
D= NULL
K = real.priv.nonres.f.asset
I = real.priv.nonres.f.invest/4
#plot(K)
#plot(I)
for (i in seq(2,57)){
C = (i-1)*4
f <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
D[(i-1)] = 1 - (uniroot(f,lower = .000001, upper = 10000)$root )
}
plot(seq(1961,2016), D*4, type = "l", main = "Annual Depreciation Rates")
K.Q = NULL
for (i in seq(1,56)){
C = (i-1)*4
C.1 = i*4
# D is indexed one year ahead of K and I
K.Q[C+1] = (1-D[i])*K[i]     + I[C.1 + 1]
K.Q[C+2] = (1-D[i])*K.Q[C+1] + I[C.1 + 2]
K.Q[C+3] = (1-D[i])*K.Q[C+2] + I[C.1 + 3]
K.Q[C+4] = (1-D[i])*K.Q[C+3] + I[C.1 + 4]
}
real.priv.nonres.f.asset.quart.2 = K.Q
plot(seq(1,224), K.Q, type = "l", main = "Method 2 Quarterly Interpolation")
library(reshape)
# Quarterly total private payroll (averaging over the months in each quarter happens prior to csv import)
bls = read.csv("BLS CES0500000001 Edit.csv")
bls.long <- melt(bls, id = c( "Year"))
bls.long <- bls.long[order(bls.long[,1], bls.long[,2]), ]
# Quarterly labor share
t.1.10 = read.csv("NIPA 1.10.csv")
alpha = t.1.10$Compensation.of.employees..paid / (t.1.10$Compensation.of.employees..paid + t.1.10$Net.operating.surplus  )
library(mFilter)
# Constructing a series for log(A_t)
# Drop first 4 values so that length matches kt
yt = real.priv.nonres.output[5:228]
kt = real.priv.nonres.f.asset.quart.2
nt = bls.long[5:228,"value"]
al = mean(alpha[5:228])
logAt = log(yt) - al*log(nt) - (1-al)*log(kt)
plot(seq(1961,2016, length.out = 224),logAt, type = "l", main = "logAt ", xlab = "year")
# HP Filter function
hp_filter <- function(X) (
(X^4)*K[(i-1)] + (X^3)*I[(C+1)] + (X^2)*I[(C+2)] + X*I[(C+3)] + I[(C+4)] - K[i]
)
# Running the HP Filter
filtered = hpfilter(logAt,freq=1600,type=c("lambda"),drift=FALSE)
a.cyc = filtered$cycle
plot(seq(1961,2016, length.out = 224),a.cyc, type = "l", main = "At Cycle ", xlab = "year")
# Autocorrelogram of cyclical component
acf(a.cyc, lag.max = 6, type = "correlation", plot = TRUE)
al
plot(alpha, type = "l")
View(t.1.10)
S  = rbind(c(2,1,1),
c(1,2,1),
c(1,1,2))
inv(S)
library(matlib)
install.packages("matlib")
library(matlib)
S  = rbind(c(2,1,1),
c(1,2,1),
c(1,1,2))
inv(S)
S  = rbind(c(1,0,1,0),
c(0,1,0,1),
c(1,0,1,0),
c(0,1,0,1))
inc(S)
inv(S)
X  = rbind(c(1,1,1,1),
c(1,2,1,1),
c(1,1,2,1),
c(1,1,1,2))
inv(X)
# Problem 4 Pset 4 15.470 2020
library(matlib)
inv(X)
mu = t(t(c(1,2,2,2)))
mu.2 = (t(mu)%*%inv(X)%*%mu)/(diag(4)%*%inv(X)%*%mu)
(diag(4)%*%inv(X)%*%mu)
inv(X)%*%mu
mu
diag(4)
id.4 <- t(rep(1,times=4))
id.4
mu.2 = (t(mu)%*%inv(X)%*%mu)/(id.4%*%inv(X)%*%mu)
mu.1 = (t(mu)%*%inv(X)%*%t(id.4))/(id.4%*%inv(X)%*%t(id.4))
mu.2 = (t(mu)%*%inv(X)%*%mu)/(id.4%*%inv(X)%*%mu)
lam = (1.5 - mu.1)/(mu.2-mu.1)
lam
x.1.5 <- lam*(inv(X)%*%mu)/(id.4%*%inv(X)%*%mu) +
(1-lam)*(inv(X)%*%t(id.4))/(id.4%*%inv(X)%*%t(id.4))
lam*(inv(X)%*%mu)
inv(X)%*%mu
lam
lam[1]
x.1.5 <- lam[1]*(inv(X)%*%mu)/(
id.4%*%inv(X)%*%mu) + (1-lam[1])*(inv(X)%*%t(id.4))/(
id.4%*%inv(X)%*%t(id.4))
lam[1]*(inv(X)%*%mu)
id.4%*%inv(X)%*%mu)
id.4%*%inv(X)%*%mu
(inv(X)%*%t(id.4))
(1-lam[1])*(inv(X)%*%t(id.4))/(
id.4%*%inv(X)%*%t(id.4))
id.4%*%inv(X)%*%t(id.4)
(inv(X)%*%t(id.4))/(
id.4%*%inv(X)%*%t(id.4))
(inv(X)%*%t(id.4))
lam[1]*(inv(X)%*%mu)/(
id.4%*%inv(X)%*%mu)[1] + (1-lam[1])*(inv(X)%*%t(id.4))/(
id.4%*%inv(X)%*%t(id.4))[1]
x.1.5 <- lam[1]*(inv(X)%*%mu)/(
id.4%*%inv(X)%*%mu)[1] + (1-lam[1])*(inv(X)%*%t(id.4))/(
id.4%*%inv(X)%*%t(id.4))[1]
x.2 <- (inv(X)%*%mu)/(id.4%*%inv(X)%*%mu)[1]
x.1 <-  (inv(X)%*%t(id.4))/(id.4%*%inv(X)%*%t(id.4))[1]
x.1.5 %*%X%*%x.1
x.1
x.1.5 %*%X%*%x.1
x.1.5 %*%S%*%x.1
S  = rbind(c(1,1,1,1),
c(1,2,1,1),
c(1,1,2,1),
c(1,1,1,2))
S%*%x.1
x.1.5 %*%S%*%x.1
x.1.5
r(x.1.5 )%*%S%*%x.1
t(x.1.5 )%*%S%*%x.1
t(x.1.5 )%*%S%*%x.2
2*x.1 + (1-2)*x.2
install.packages("blogdown")
blogdown::install_hugo()
setwd("~/GitHub/Website-2.0")
blogdown:::serve_site()
hugo build
hugo
HUGO_VERSION
